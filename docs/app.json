[{"name":"app.R","content":"library(shiny)\r\n\r\n# Define UI ----\r\nui <- fluidPage(\r\n  titlePanel(\"ZĂˇĹ™icĂ­ BioPodobnost\"),\r\n  tabsetPanel(\r\n    tabPanel(\r\n      \"NahrĂˇnĂ­ souboru\",\r\n      sidebarLayout(\r\n        sidebarPanel(\r\n          includeMarkdown(\"howto.md\"),\r\n          fileInput(\"upload\", NULL, buttonLabel = \"Nahraj CSV\", multiple = FALSE, accept = \".csv\"),\r\n          includeMarkdown(\"credits.md\")\r\n        ),\r\n        mainPanel(\r\n          tableOutput(\"head\"),\r\n\r\n        )\r\n      )\r\n    ),\r\n    tabPanel(\"Phylostrom\",\r\n      plotOutput(\"phylostrom\", height = \"1000px\"),\r\n    ),\r\n    tabPanel(\"Dendogram\",\r\n    fixedPanel(\r\n        sliderInput(\"k_centerD\", \"PoÄŤet K klustrĹŻ\", min = 1, max = 10, value = 5, step = 1),\r\n        right = 10,\r\n        bottom = 10\r\n      ),\r\n      plotOutput(\"dendogram\", height = \"800px\")\r\n    ),\r\n    tabPanel(\"K Klustry\",\r\n      fixedPanel(\r\n        sliderInput(\"k_center\", \"PoÄŤet K klustrĹŻ\", min = 1, max = 10, value = 5, step = 1),\r\n        right = 10,\r\n        bottom = 10\r\n      ),\r\n      plotOutput(\"kklustry\", height = \"800px\")\r\n    ),\r\n  )\r\n)\r\n\r\n# Define server logic ----\r\nserver <- function(input, output, session) {\r\n  data <- reactive({\r\n    req(input$upload)\r\n\r\n    ext <- tools::file_ext(input$upload$name)\r\n    switch(ext,\r\n      csv = read.table(file = input$upload$datapath, sep = \",\", header = TRUE, stringsAsFactors = FALSE),\r\n      validate(\"Invalid file; Please upload a .csv file\")\r\n    )\r\n  })\r\n\r\n  # Uprav data\r\n  tidy_data <- reactive({\r\n    data <- data()\r\n    drops <- c(\"ÄŚasovĂˇ.znaÄŤka\")\r\n    data <- data[, !(names(data) %in% drops)]\r\n    names(data)[names(data) == \"JmĂ©no.a.pĹ™Ă­jmenĂ­.\"] <- \"JmĂ©no\"\r\n    return(data)\r\n  })\r\n\r\n  # odstraĹ duplicity a NA\r\n  rem_dup <- reactive({\r\n    data <- tidy_data()\r\n    data <- dplyr::distinct(data,JmĂ©no, .keep_all= TRUE)\r\n    data[is.na(data)] <- \"NIC!\"\r\n    return(data)\r\n  })\r\n\r\n  # Tabulka\r\n  output$head <- renderTable({\r\n    rem_dup()\r\n  })\r\n\r\n  # Faktory na ÄŤĂ­sla\r\n  fac_data <- reactive({\r\n    data <- rem_dup()\r\n    data2 <- data[, -1]\r\n    rownames(data2) <- data[, 1]\r\n\r\n    for (i in seq_len(ncol(data2))){\r\n      data2[, i] <- as.factor(data2[, i])\r\n    }\r\n\r\n    for (i in seq_len(ncol(data2))){\r\n      data2[, i] <- as.numeric(data2[, i])\r\n    }\r\n    return(data2)\r\n  })\r\n\r\n  # Distances\r\n  distances <- reactive({\r\n    data <- fac_data()\r\n\r\n    # Calculate pairwise distances using Euclidean distance\r\n    distances <- dist(data, method = \"euclidean\")\r\n    return(distances)\r\n  })\r\n\r\n  # Phylostrom s dist\r\n  output$phylostrom <- renderPlot({\r\n    req(input$upload)\r\n\r\n    data <- fac_data()\r\n    data2 <- rem_dup()\r\n    distances <- distances()\r\n    pheatmap::pheatmap(distances, display_numbers = TRUE, clustering_method = \"ward.D2\", labels_row = data2$JmĂ©no, labels_col = data2$JmĂ©no, fontsize = 18)\r\n  })\r\n\r\n  # Cluster dendogram\r\n  output$dendogram <- renderPlot({\r\n    req(input$upload)\r\n\r\n    data <- fac_data()\r\n    d <- distances()\r\n    hc5 <- hclust(d, method = \"ward.D2\",)\r\n    plot(hc5, cex = 1.2)\r\n    rect.hclust(hc5, k = input$k_centerD, border = 2:5)\r\n  })\r\n\r\n  # K klustry\r\n  output$kklustry <- renderPlot({\r\n    req(input$upload)\r\n\r\n    data <- fac_data()\r\n\r\n    set.seed(123)\r\n    final <- kmeans(data, input$k_center, nstart = 25)\r\n    factoextra::fviz_cluster(final, data = data, labelsize = 18)\r\n  })\r\n}\r\n\r\n# Run the app ----\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
